using System.Text;

namespace globulator;

public static class ByteCipher
{
    public static byte[] XOR(byte[] textBytes, string password)
    {
        byte[] keyBytes = GetKey(textBytes.Length, password);
        byte[] XORArray = BinOps.Bin_Xor(textBytes, keyBytes);

        return XORArray;
    }

    private static byte[] GetKey(int length, string password)
    {
        byte[] keyBytes = new byte[length];
        byte[] passwordBytes = Encoding.ASCII.GetBytes(password);

        // generate an int equivalent of the password by converting to bytes and then adding
        // this is for the RNG seed
        int passwordInt = 0;
        foreach (byte b in passwordBytes)
            passwordInt += b;

        Random r = new(passwordInt);

        // originally, this was generated by selecting a random char from a string of all characters
        // however, after some brain thinking and tinkering, it was MUCH faster to generate a key by merely generating an integer-
        // - between 0 & 127 inclusive, and then converting that to a byte that represents an ASCII character
        for (int i = 0; i < length; i++)
            keyBytes[i] = (byte)r.Next(127);

        return keyBytes;
    }
}